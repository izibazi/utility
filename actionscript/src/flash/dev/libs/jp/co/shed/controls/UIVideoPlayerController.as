package jp.co.shed.controls{	import flash.display.MovieClip;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.text.TextField;	import flash.utils.Timer;	import jp.co.shed.display.SDMovieClip;	import jp.co.shed.events.UIVideoPlayerEvent;		/**	 * FLV,MP4の再生のコントローラを管理するクラス。	 * 	 * @author ishibashi	 */		public class UIVideoPlayerController extends EventDispatcher	{		private var m_play:UIVideoPlayer;				private var play_btn:MovieClip;				private var stop_btn:MovieClip;				private var pause_btn:MovieClip;				private var mute_btn:MovieClip;				private var unmute_btn:MovieClip;				private var loadProgressbar_btn:MovieClip;				private var seekbarThumb_btn:MovieClip;				private var seekbar_mc:MovieClip;				private var time_txt:TextField;				private var duration_txt:TextField				private var bufferActivityIndicator_mc:MovieClip;				public var useSE:Boolean = true;				private var m_playButton:UIButton;				private var m_stopButton:UIButton;				private var m_pauseButton:UIButton;				private var m_loadProgressbarButton:UIButton;				private var m_unmuteButton:UIButton;				private var m_muteButton:UIButton;				private var m_seekbarThumbButton:UIButton;				private var dragging:Boolean = false;				private var pausing:Boolean = false;				public var timeDelimiter:String = ":";				/**		 * コンストラクタ。		 * 		 * loadProgressbar_btn,seekbarThumb_btn,seekbar_mcは、		 * 状況により使用不可となります。		 * (UIVideoPlayerオブジェクトのdurationの値が0の場合など)		 * 		 * @param	player		 * @param	play_btn		 * @param	stop_btn		 * @param	pause_btn		 * @param	mute_btn		 * @param	unmute_btn		 * @param	loadProgressbar_btn		 * @param	seekbarThumb_btn		 * @param	seekbar_mc		 * @param	time_txt		 * @param	duration_txt		 * @param	bufferActivityIndicator_mc		 */		public function UIVideoPlayerController(								player:UIVideoPlayer,								play_btn:MovieClip=null , 								stop_btn : MovieClip=null ,								pause_btn:MovieClip=null,								mute_btn:MovieClip=null,								unmute_btn:MovieClip=null, 								loadProgressbar_btn:MovieClip=null,								seekbarThumb_btn:MovieClip=null,								seekbar_mc:MovieClip=null,								time_txt:TextField=null,								duration_txt:TextField=null,								bufferActivityIndicator_mc:MovieClip = null) 								{ 			m_play = player;			setPlayButton(play_btn);			setStopButton(stop_btn);			setPauseButton(pause_btn);			setMuteButton(mute_btn);			setUnmuteButton(unmute_btn);			setLoadProgressbarButton(loadProgressbar_btn);						setSeekbar(seekbar_mc);			setSeekbarThumbButton(seekbarThumb_btn);						setTimeText(time_txt);			setDurationText(duration_txt);						setActivityIndicator(bufferActivityIndicator_mc);			mute(player.mute);		}				private function setPlayButton(play_btn:MovieClip):void 		{			this.play_btn = play_btn;			if (play_btn != null) 			{				m_playButton = new UIButton(this.play_btn, _onPlayReleased);				m_playButton.useLabel = true;			}		}				private function _onPlayReleased(evt:UIButtonInfo):void 		{			player.play();		}		private function setStopButton(stop_btn:MovieClip):void		{			this.stop_btn = stop_btn;			if (stop_btn != null)			{				m_stopButton = new UIButton(this.stop_btn, _onStopReleased);				m_stopButton.useLabel = true;			}		}		private function _onStopReleased(evt:UIButtonInfo):void 		{			player.stop();		}		private function setPauseButton(pause_btn:MovieClip):void 		{			this.pause_btn = pause_btn;			if (pause_btn != null) 			{				m_pauseButton = new UIButton(this.pause_btn, _onPauseReleased);				m_pauseButton.useLabel = true;			}		}		private function _onPauseReleased(evt:UIButtonInfo):void 		{			player.pause();		}		private function setMuteButton(mute_btn:MovieClip):void 		{			this.mute_btn = mute_btn;			if (mute_btn != null)			{				m_muteButton = new UIButton(this.mute_btn, _onMuteReleased);				m_muteButton.useLabel = true;			}		}		private function _onMuteReleased(evt:UIButtonInfo):void		{			player.mute = true;		}		private function setUnmuteButton(unmute_btn:MovieClip):void 		{			this.unmute_btn = unmute_btn;			if (unmute_btn != null) 			{				m_unmuteButton = new UIButton(this.unmute_btn, _onUnmuteReleased);				m_unmuteButton.useLabel = true;			}		}		private function _onUnmuteReleased(evt:UIButtonInfo):void		{			player.mute = false;		}						private function setLoadProgressbarButton(loadProgressbar_btn:MovieClip):void		{			this.loadProgressbar_btn = loadProgressbar_btn;			if (loadProgressbar_btn)			{				this.loadProgressbar_btn.scaleX = 0;				m_loadProgressbarButton = new UIButton(this.loadProgressbar_btn, _onLoadProgressbarReleased,null,_onLoadProgressbarRolledOut);				m_loadProgressbarButton.useLabel = true;			}		}		private function _onLoadProgressbarRolledOut(evt:UIButtonInfo):void 		{					}		private function _onLoadProgressbarReleased(evt:UIButtonInfo):void 		{			var scaleX:Number = loadProgressbar_btn.scaleX;			loadProgressbar_btn.scaleX = 1;			var w:Number = loadProgressbar_btn.width;			loadProgressbar_btn.scaleX = scaleX;			var pct:Number = loadProgressbar_btn.mouseX / w;			pct *= scaleX;			if (pct > 0.99)				pct = 0.99;			/*			pct *= 10;			pct = Math.floor(pct);			pct /= 10;			*/						player.seekByPercent(pct);			}				private function setSeekbarThumbButton(seekbarThumb_btn:MovieClip):void 		{			this.seekbarThumb_btn = seekbarThumb_btn;			if (seekbarThumb_btn)			{				m_seekbarThumbButton = new UIButton(seekbarThumb_btn);				seekbarThumbButton.onButtonPress = _onSeekbarThumbPressed;				seekbarThumb_btn.visible = false;				seekbarThumbButton.enabled = validSeekbarThumb();			}		}		private function _onSeekbarThumbPressed(evt:UIButtonInfo):void 		{			if (player.ns == null) return;						pausing = player.pausing;			player.ns.pause();			dragging = true;			_seek();			seekbarThumb_btn.stage.addEventListener(MouseEvent.MOUSE_MOVE, _onThumbDragged);			seekbarThumb_btn.stage.addEventListener(MouseEvent.MOUSE_UP, _onMouseUp);						var scaleX:Number = loadProgressbar_btn.scaleX;			loadProgressbar_btn.scaleX = 1;			var w:Number = loadProgressbar_btn.width;			loadProgressbar_btn.scaleX = scaleX;			seekbarThumb_btn.startDrag(false, new Rectangle(loadProgressbar_btn.x, loadProgressbar_btn.y, w, 0));		}				private function _onThumbDragged(evt:MouseEvent = null):void		{						seekbar_mc.width = seekbarThumb_btn.x - seekbar_mc.x;			if (seekbarThumb_btn.x > (loadProgressbar_btn.x + loadProgressbar_btn.width))			{				seekbarThumb_btn.x = (loadProgressbar_btn.x + loadProgressbar_btn.width);			}			_seek();		}				private function _onMouseUp(evt:MouseEvent):void 		{			seekbarThumb_btn.stage.removeEventListener(MouseEvent.MOUSE_MOVE, _onThumbDragged);			seekbarThumb_btn.stage.removeEventListener(MouseEvent.MOUSE_UP, _onMouseUp);				dragging = false;			if (!pausing)			{				player.ns.resume();				}			seekbarThumb_btn.stopDrag();			_seek();			seekbarThumb_btn.stage.removeEventListener(MouseEvent.MOUSE_MOVE, _onThumbDragged);		}				private function _seek(evt:MouseEvent = null):void 		{			var scaleX:Number = loadProgressbar_btn.scaleX;			loadProgressbar_btn.scaleX = 1;			var w:Number = loadProgressbar_btn.width;			loadProgressbar_btn.scaleX = scaleX;			var pct:Number = (seekbarThumb_btn.x - loadProgressbar_btn.x) / w;						if (pct > 0.99)				pct = 0.99;			player.seekByPercent(pct);		}		private function setSeekbar(seekbar_mc:MovieClip):void 		{			this.seekbar_mc = seekbar_mc;			if (this.seekbar_mc) 			{				this.seekbar_mc.mouseChildren = false;				this.seekbar_mc.mouseEnabled = false;				seekbar_mc.scaleX = 0;				}		}				private function setActivityIndicator(bufferActivityIndicator_mc:MovieClip):void 		{			this.bufferActivityIndicator_mc = bufferActivityIndicator_mc;			if (this.bufferActivityIndicator_mc) 			{				this.bufferActivityIndicator_mc.visible = false;			}			}				private function setTimeText(time_txt:TextField):void 		{			this.time_txt = time_txt;			if (time_txt) 			{				time_txt.text = formatTime(0);			}		}				private function setDurationText(duration_txt:TextField):void		{			this.duration_txt = duration_txt;			if (duration_txt) 			{				duration_txt.text = formatTime(0);			}		}				private function validSeekbarThumb():Boolean 		{			return seekbarThumb_btn && loadProgressbar_btn && seekbar_mc && player.duration > 0;		}				public function update():void		{			if (seekbar_mc && !player.seeking)			{				seekbar_mc.scaleX = player.timePercent;				if (player.ended)				{					seekbar_mc.scaleX = 1;					}			}						if (validSeekbarThumb())			{				seekbarThumbButton.enabled = true;				if (dragging) 				{					seekbar_mc.width = seekbarThumb_btn.x - seekbar_mc.x;				}				else				{					seekbarThumb_btn.x = seekbar_mc.width + seekbar_mc.x;				}				seekbarThumb_btn.y = seekbar_mc.y;				if (!seekbarThumb_btn.visible)				{					seekbarThumb_btn.visible = true;					}			}else {				if (seekbarThumb_btn && seekbarThumb_btn.visible)				{					seekbarThumb_btn.visible = false;					}							}			if (loadProgressbar_btn) 			{				//var enabled:Boolean = player.duration > 0;				var enabled:Boolean = player.duration > 0;				if (loadProgressbarButton.enabled != enabled)				{					loadProgressbarButton.enabled = enabled;				}				loadProgressbar_btn.scaleX = player.loadedPercent;			}						if (stop_btn)			{				if (player.time == 0 || player.ended)				{					if (stopButton.enabled)					{						stopButton.enabled = false;					}				}				else if (player.playing)				{					if (!stopButton.enabled)					{						stopButton.enabled = true;					}									}				else if (!player.playing) 				{					if (!stopButton.enabled)					{						stopButton.enabled = false;					}									}			}						if (play_btn) 			{				if (player.connecting)				{					if (playButton.enabled)					{						playButton.enabled = false;					}									}				else if (player.ended)				{					if (!playButton.enabled)					{						playButton.enabled = true;					}				}				else if (player.playing && player.pausing)				{					if (!playButton.enabled)					{						playButton.enabled = true;					}								}				else if (player.playing && !player.pausing)				{					if (playButton.enabled) 					{						playButton.enabled = false;					}									}				else if (!player.playing) 				{					if (!playButton.enabled)					{						playButton.enabled = true;					}										}			}						if (pause_btn)			{				if (player.ended)				{					if (pauseButton.enabled)					{						pauseButton.enabled = false;					}				}				else if (player.playing && player.pausing) 				{					if (pauseButton.enabled)					{						pauseButton.enabled = false;					}								}				else if (player.playing && !player.pausing)				{					if (!pauseButton.enabled)					{						pauseButton.enabled = true;					}									}				else if (!player.playing)				{					if (pauseButton.enabled) 					{						pauseButton.enabled = false;					}										}			}			if (bufferActivityIndicator_mc) 			{				var isSDMovieClip:Boolean = bufferActivityIndicator_mc is SDMovieClip;				if (player.ended || (player.connected && !player.buffering))				{					if (bufferActivityIndicator_mc.visible == true)					{						if (isSDMovieClip) 						{							bufferActivityIndicator_mc.hide();							}						else						{							bufferActivityIndicator_mc.visible = false;						}						}									}				else if (player.connecting || player.buffering) 				{					if (bufferActivityIndicator_mc.visible == false)					{						if (isSDMovieClip)						{							bufferActivityIndicator_mc.show();							}						else 						{							bufferActivityIndicator_mc.visible = true;						}					}				}			}						if (this.duration_txt) 			{				this.duration_txt.text = formatTime(player.duration);			}			if (this.time_txt) 			{				this.time_txt.text = formatTime(player.time);			}		}				private function formatTime(time:Number):String 		{			if (time == 0) return "00" + timeDelimiter + "00";						var min:int = time / 60;			var sec:int = time % 60;			return ((min < 10)?("0" + min):min) + timeDelimiter + ((sec < 10)?("0" + sec):sec);		}				public function reset():void		{				}				public function play():void 		{			if (play_btn)			{				playButton.enabled = false;			}			if (stop_btn)			{				stopButton.enabled = true;			}				if (pause_btn)			{				pauseButton.enabled = true;			}		}				public function stop():void		{			if (play_btn)			{				playButton.enabled = true;			}				if (stop_btn)			{				stopButton.enabled = false;			}				if (pause_btn)			{				pauseButton.enabled = false;			}		}				public function pause():void		{			if (play_btn)			{				playButton.enabled = true;			}			if (pause_btn) 			{				pauseButton.enabled = false;				}						if (stop_btn)			{				if (player.time == 0)				{					stopButton.enabled = false;				}			}		}				public function resume():void		{			if (play_btn)			{				playButton.enabled = false;			}			if (pause_btn)			{				pauseButton.enabled = true;				}		}				public function mute(bool:Boolean):void		{			if (mute_btn) 			{				muteButton.enabled = !bool;			}			if (unmute_btn)			{				unmuteButton.enabled = bool;			}			}		public function close():void		{			update();		}				public function dispose():void		{			if (play_btn)			{				playButton.dispose();				}			if (pause_btn) 			{				pauseButton.dispose();				}			if (stop_btn) 			{				stopButton.dispose();				}			if (unmute_btn)			{				unmuteButton.dispose();				}			if (mute_btn)			{				muteButton.dispose();				}			if (loadProgressbar_btn)			{				loadProgressbarButton.dispose();				}			if (bufferActivityIndicator_mc) 			{				bufferActivityIndicator_mc.visible = false;			}						if (loadProgressbar_btn) 			{				loadProgressbarButton.dispose();				}						if (seekbarThumb_btn) 			{				seekbarThumb_btn.stage.removeEventListener(MouseEvent.MOUSE_MOVE, _onThumbDragged);				seekbarThumb_btn.stage.removeEventListener(MouseEvent.MOUSE_UP, _onMouseUp);				}			}				public function complete():void 		{			if(seekbar_mc)					seekbar_mc.scaleX = 1;		}				public function get playButton():UIButton { return m_playButton; }				public function get stopButton():UIButton { return m_stopButton; }				public function get loadProgressbarButton():UIButton { return m_loadProgressbarButton; }				public function get pauseButton():UIButton { return m_pauseButton; }				public function get unmuteButton():UIButton { return m_unmuteButton; }				public function get muteButton():UIButton { return m_muteButton; }				public function get player():UIVideoPlayer { return m_play; }				public function get seekbarThumbButton():UIButton { return m_seekbarThumbButton; }	}}